package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUAL, DIF, MAQ, MEQ, MAIGQ, MEIGQ, AND, OR, NOT;
nonterminal NodoC3D inicial, expresion;

precedence left MAS, MENOS, AND, OR, MAIGQ, MEIGQ, IGUAL, DIF, MAQ, MEQ;
precedence left MULT, DIV; 
precedence right POT, NOT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        RESULT = exp;
                        
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),1); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),1); 
                    :}
            |   expresion:izq OR expresion:der
                    {: 
                        
                        String c3d = "L"+izq.getNum()+": ";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(der.getCad(),1); 
                    :}
            |   expresion:izq MAIGQ expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d =  "if "+izq.getCad()+">="+der.getCad()+" goto "+"L"+temp;
                        temp = ControlC3D.generaTemp();
                        c3d += "\n   goto "+"L"+temp+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),temp); 
                    :}
            |   expresion:izq MEIGQ expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d =  "if "+izq.getCad()+"<="+der.getCad()+" goto "+"L"+temp;
                        temp = ControlC3D.generaTemp();
                        c3d += "\n   goto "+"L"+temp+"\n";
                        ControlC3D.agregarC3D(c3d); 
                        RESULT = new NodoC3D(izq.getCad(),temp); 
                    :}
            |   expresion:izq IGUAL expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d =  "if "+izq.getCad()+"=="+der.getCad()+" goto "+"L"+temp;
                        temp = ControlC3D.generaTemp();
                        c3d += "\n   goto "+"L"+temp+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),temp); 
                    :}
            |   expresion:izq DIF expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d =  "if "+izq.getCad()+"!="+der.getCad()+" goto "+"L"+temp;
                        temp = ControlC3D.generaTemp();
                        c3d += "\n   goto "+"L"+temp+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),temp); 
                    :}
            |   expresion:izq MAQ expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d =  "if "+izq.getCad()+">"+der.getCad()+" goto "+"L"+temp;
                        temp = ControlC3D.generaTemp();
                        c3d += "\n   goto "+"L"+temp+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),temp); 
                    :}
            |   expresion:izq MEQ expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = "if "+izq.getCad()+"<"+der.getCad()+" goto "+"L"+temp;
                        temp = ControlC3D.generaTemp();
                        c3d += "\n   goto "+"L"+temp+"\n";
                        ControlC3D.agregarC3D(c3d); 
                        RESULT = new NodoC3D(der.getCad(),temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),1); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),1); 
                    :}
            |   expresion:izq AND expresion:der
                    {: 
                        String c3d = "L"+(izq.getNum())+": ";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(der.getCad(),1);
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(izq.getCad(),1); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(c3d,1); 
                    :}
            |   NOT expresion:exp 
                    {: 
                        int temp = ControlC3D.generaTemp();
                        String c3d = temp + " = ! " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(c3d,1); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id,1); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero,1); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal,1); :}
            ;